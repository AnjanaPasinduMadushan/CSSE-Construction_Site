import { expect } from "chai";
import { describe } from "mocha";
import { it } from "mocha";
import { before } from "mocha";
import { after } from "mocha";
import request from "supertest";
import express from "express";
import ConstructionSiteDTO from "../DTO/construction-siteDTO.js";
import ConstructionSite from "../models/construction-site/constructionsite-model.js";
import {
  addConstructionSite,
  getAllSites,
  deleteConstructionSite,
  getSiteBySiteId ,
} from "../controllers/constructionsite-controller.js";
import sinon from "sinon";
const app = express();

app.use(express.json());

app.post("/addConstructionSite", addConstructionSite);

describe("addConstructionSite", function () {
  it("should add a construction site with autogenerated siteID for valid input", async function () {
    const constructionSiteData = new ConstructionSiteDTO({
      siteName: "Test Site",
      location: "Test Location",
      threeshold: "Test Threshold",
      address: "Test Address",
      province: "Test Province",
      description: "Test Description",
      startDate: "2023-10-24",
      endDate: "2023-10-25",
      managerID: "Test ManagerID",
    });

    const response = await request(app)
      .post("/addConstructionSite")
      .send({ ConstructionSiteDTO: constructionSiteData });

    expect(response.status).to.equal(201);
    expect(response.body.message).to.equal("Construction Site is Added");
    expect(response.body.ConstructionSite).to.be.an("object");
  });

  it("should return 409 status and error message for missing siteName", async function () {
    const constructionSiteData = new ConstructionSiteDTO({
      siteName: null, // Invalid, as siteName is missing
      location: "Test Location",
      threeshold: "Test Threshold",
      address: "Test Address",
      province: "Test Province",
      description: "Test Description",
      startDate: "2023-10-24",
      endDate: "2023-10-25",
      managerID: "Test ManagerID",
    });

    const response = await request(app)
      .post("/addConstructionSite")
      .send({ ConstructionSiteDTO: constructionSiteData });

    expect(response.status).to.equal(409);
    expect(response.body.message).to.equal("Site Name is required");
  });
});

//Get all sites Testing Completed
//    ✔ should handle errors and return a 400 status code
//✔ should return all sites when successful
describe("getAllSites", () => {
  it("should return all sites when successful", async () => {
    // Arrange
    const fakeSites = [{ siteName: "Site 1" }, { siteName: "Site 2" }];
    sinon.stub(ConstructionSite, "find").resolves(fakeSites);
    const req = {};
    const res = {
      status: sinon.stub().returnsThis(),
      json: sinon.stub(),
    };

    // Act
    await getAllSites(req, res);

    // Assert
    sinon.assert.calledWith(res.status, 200);
    sinon.assert.calledWith(res.json, fakeSites);
    ConstructionSite.find.restore(); // Restore the original function
  });

  it("should handle errors and return a 400 status code", async () => {
    // Arrange
    sinon.stub(ConstructionSite, "find").rejects(new Error("A 404 Returned"));
    const req = {};
    const res = {
      status: sinon.stub().returnsThis(),
      json: sinon.stub(),
    };

    // Act
    await getAllSites(req, res);

    // Assert
    sinon.assert.calledWith(res.status, 400);
    sinon.assert.calledWith(res.json, {
      message: "Error occurred in fetching Sites",
    });
    ConstructionSite.find.restore(); // Restore the original function
  });
});

//Delete a site but it works when you paas the a valid siteID
//*Both Scenarios Have been tested*/
//    ✔ should delete a construction site
//✔ should return a 404 error for a non-existent construction site
describe("Construction Site Controller", () => {
  // Positive test case
  it("should delete a construction site", async () => {
    const constructionSite = new ConstructionSite({
      siteID: "123",
      // ... other required properties
    });

    const req = {
      params: {
        siteId: "123",
      },
    };

    const res = {
      status: (statusCode) => ({
        json: (response) => {
          expect(statusCode).to.equal(200);
          expect(response).to.have.property(
            "message",
            "Site deleted successfully"
          );
        },
      }),
    };

    const deleteOneStub = sinon.stub(ConstructionSite, "deleteOne");
    deleteOneStub.returns({ deletedCount: 1 }); // Simulate a successful deletion

    await deleteConstructionSite(req, res);

    deleteOneStub.restore();
  });

  // Negative test case
  it("should return a 404 error for a non-existent construction site", async () => {
    const req = {
      params: {
        siteId: "nonexistent",
      },
    };

    const res = {
      status: (statusCode) => ({
        json: (response) => {
          expect(statusCode).to.equal(404);
          expect(response).to.have.property("message", "Site not found");
        },
      }),
    };

    const deleteOneStub = sinon.stub(ConstructionSite, "deleteOne");
    deleteOneStub.returns({ deletedCount: 0 }); // Simulate a non-existent site

    await deleteConstructionSite(req, res);

    deleteOneStub.restore();
  });
});

describe('getSiteBySiteId', () => {
  it('should return a site when a valid siteId is provided', async () => {
    // Create a test site
    const testSite = new ConstructionSite({
      siteID: 'valid-site-id',
      // other required properties
    });
    await testSite.save();

    const req = {
      params: {
        siteId: 'valid-site-id',
      },
    };

    const res = {
      status(code) {
        this.statusCode = code;
        return this;
      },
      json(data) {
        this.data = data;
      },
    };

    await getSiteBySiteId(req, res);

    expect(res.statusCode).to.equal(200);
    expect(res.data.siteID).to.equal('valid-site-id');
    // Add more expectations for other properties as needed
  });

  it('should return a 404 status when an invalid siteId is provided', async () => {
    const req = {
      params: {
        siteId: 'nonexistent-site-id',
      },
    };

    const res = {
      status(code) {
        this.statusCode = code;
        return this;
      },
      json(data) {
        this.data = data;
      },
    };

    await getSiteBySiteId(req, res);

    expect(res.statusCode).to.equal(404);
    expect(res.data.message).to.equal('Site not found');
  });

  it('should return a 400 status when an error occurs', async () => {
    this.timeout(5000);
    const req = {
      params: {
        siteId: 'invalid-site-id',
      },
    };

    const res = {
      status(code) {
        this.statusCode = code;
        return this;
      },
      json(data) {
        this.data = data;
      },
    };

    await getSiteBySiteId(req, res);

    expect(res.statusCode).to.equal(400);
    expect(res.data.message).to.equal('Error occurred in fetching Site');
  });
});
